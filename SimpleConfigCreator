using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

public class SimpleConfigCreator
{
    public class ConfigBlock
    {
        public string Name { get; set; }
        public Dictionary<string, object> Keys { get; set; } = new Dictionary<string, object>();
    }

    public class Config
    {
        public Dictionary<string, object> Assignments { get; set; } = new Dictionary<string, object>();
        public List<ConfigBlock> Blocks { get; set; } = new List<ConfigBlock>();
    }

    // Método para escribir la configuración en un archivo
    public static void WriteConfig(string filePath, Config config)
    {
        var sb = new StringBuilder();

        // Escribir asignaciones
        foreach (var assignment in config.Assignments)
        {
            sb.AppendLine($"SET {assignment.Key} = {FormatValue(assignment.Value)}");
        }

        // Escribir bloques
        foreach (var block in config.Blocks)
        {
            sb.AppendLine($"{block.Name}:");
            foreach (var key in block.Keys)
            {
                sb.AppendLine($"  {key.Key} = {FormatValue(key.Value)}");
            }
        }

        // Escribir el archivo
        File.WriteAllText(filePath, sb.ToString());
    }

    // Método auxiliar para formatear valores en cadena
    private static string FormatValue(object value)
    {
        if (value is string strValue)
        {
            return $"\"{strValue}\"";
        }

        if (value is bool || value is int || value is double)
        {
            return value.ToString().ToLower(); // Para números y booleanos
        }

        return value.ToString();
    }

    public static void DisplayConfig(Config config)
    {
        Console.WriteLine("Asignaciones:");
        foreach (var assignment in config.Assignments)
        {
            Console.WriteLine($"{assignment.Key} = {assignment.Value}");
        }

        Console.WriteLine("\nBloques:");
        foreach (var block in config.Blocks)
        {
            Console.WriteLine($"[{block.Name}]");
            foreach (var key in block.Keys)
            {
                Console.WriteLine($"{key.Key} = {key.Value}");
            }
        }
    }
}