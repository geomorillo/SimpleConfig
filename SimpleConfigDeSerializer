using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;

public class SimpleConfigDeserializer
{
    public T Parse<T>(string path) where T : new()
    {
        var config = new T(); // Crear una instancia de la clase genérica
        var lines = File.ReadAllLines(path);
        string currentBlock = string.Empty;
        object currentObject = config;
        Dictionary<string, object> tempBlocks = new Dictionary<string, object>();

        foreach (var line in lines)
        {
            string trimmedLine = line.Trim();

            // Ignorar comentarios
            if (trimmedLine.StartsWith("#") || trimmedLine.StartsWith("//"))
                continue;

            // Asignación individual (SET)
            if (trimmedLine.StartsWith("SET"))
            {
                var parts = trimmedLine.Substring(4).Split("=");
                var key = parts[0].Trim();
                var value = parts[1].Trim().Trim('"'); // Eliminar comillas de los valores string

                // Asignar el valor directamente al objeto basado en la propiedad
                SetProperty(config, key, value);
            }
            // Bloques (Nombres de bloques como OWNER, DATABASE, SERVER)
            else if (trimmedLine.EndsWith(":"))
            {
                currentBlock = trimmedLine.Substring(0, trimmedLine.Length - 1).Trim();

                // Empezamos a buscar el bloque dentro del objeto
                currentObject = GetBlockObject(config, currentBlock);
            }
            // Procesar líneas dentro de bloques
            else if (!string.IsNullOrEmpty(currentBlock))
            {
                var parts = trimmedLine.Split("=");
                if (parts.Length == 2)
                {
                    var key = parts[0].Trim();
                    var value = parts[1].Trim();

                    SetProperty(currentObject, key, value);
                }
            }
        }

        return config;
    }

    private void SetProperty(object target, string propertyName, string value)
    {
        var property = target.GetType().GetProperty(propertyName, BindingFlags.IgnoreCase | BindingFlags.Public | BindingFlags.Instance);
        
        if (property != null)
        {
            // Convertir el valor al tipo adecuado
            if (property.PropertyType == typeof(string))
            {
                property.SetValue(target, value);
            }
            else if (property.PropertyType == typeof(int))
            {
                property.SetValue(target, int.Parse(value));
            }
            else if (property.PropertyType == typeof(double))
            {
                property.SetValue(target, double.Parse(value));
            }
            else if (property.PropertyType == typeof(bool))
            {
                property.SetValue(target, bool.Parse(value));
            }
            else if (property.PropertyType == typeof(DateTime))
            {
                property.SetValue(target, DateTime.Parse(value));
            }
            else if (property.PropertyType.IsGenericType && property.PropertyType.GetGenericTypeDefinition() == typeof(List<>))
            {
                // Asignar listas
                var listType = property.PropertyType.GetGenericArguments()[0];
                var list = (IList<object>)Activator.CreateInstance(property.PropertyType);

                foreach (var item in value.Split(','))
                {
                    list.Add(Convert.ChangeType(item.Trim(), listType));
                }

                property.SetValue(target, list);
            }
            else
            {
                throw new InvalidOperationException($"Tipo no soportado para asignar: {property.PropertyType.Name}");
            }
        }
    }

    private object GetBlockObject(object config, string blockName)
    {
        var property = config.GetType().GetProperty(blockName, BindingFlags.IgnoreCase | BindingFlags.Public | BindingFlags.Instance);

        if (property != null)
        {
            return property.GetValue(config);
        }

        return null;
    }
}
