using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;

public class SimpleConfigSerializer
{
    public void Serialize<T>(T config, string path)
    {
        var lines = new List<string>();
        SerializeObject(config, lines, 0);
        File.WriteAllLines(path, lines);
    }

    private void SerializeObject(object obj, List<string> lines, int indentLevel)
    {
        var type = obj.GetType();

        foreach (var property in type.GetProperties(BindingFlags.Public | BindingFlags.Instance))
        {
            var value = property.GetValue(obj);
            var propertyName = property.Name;

            // Manejo de propiedades simples (string, bool, int, etc.)
            if (value != null && !IsComplexType(property.PropertyType))
            {
                var indent = new string(' ', indentLevel * 2);
                lines.Add($"{indent}SET {propertyName} = \"{value}\"");
            }
            // Manejo de listas
            else if (value is IEnumerable<object> list)
            {
                var indent = new string(' ', indentLevel * 2);
                var listValues = string.Join(",", list);
                lines.Add($"{indent}{propertyName} = {listValues}");
            }
            // Manejo de sub-bloques (objetos complejos)
            else if (value != null)
            {
                var indent = new string(' ', indentLevel * 2);
                lines.Add($"{indent}{propertyName}:");
                SerializeObject(value, lines, indentLevel + 1);
            }
        }
    }

    private bool IsComplexType(Type type)
    {
        return type.IsClass && type != typeof(string);
    }
}
